/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/janekbaraniewski/kubeserial/pkg/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerScheduleRequestLister helps list ManagerScheduleRequests.
// All objects returned here must be treated as read-only.
type ManagerScheduleRequestLister interface {
	// List lists all ManagerScheduleRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerScheduleRequest, err error)
	// ManagerScheduleRequests returns an object that can list and get ManagerScheduleRequests.
	ManagerScheduleRequests(namespace string) ManagerScheduleRequestNamespaceLister
	ManagerScheduleRequestListerExpansion
}

// managerScheduleRequestLister implements the ManagerScheduleRequestLister interface.
type managerScheduleRequestLister struct {
	indexer cache.Indexer
}

// NewManagerScheduleRequestLister returns a new ManagerScheduleRequestLister.
func NewManagerScheduleRequestLister(indexer cache.Indexer) ManagerScheduleRequestLister {
	return &managerScheduleRequestLister{indexer: indexer}
}

// List lists all ManagerScheduleRequests in the indexer.
func (s *managerScheduleRequestLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerScheduleRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerScheduleRequest))
	})
	return ret, err
}

// ManagerScheduleRequests returns an object that can list and get ManagerScheduleRequests.
func (s *managerScheduleRequestLister) ManagerScheduleRequests(namespace string) ManagerScheduleRequestNamespaceLister {
	return managerScheduleRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerScheduleRequestNamespaceLister helps list and get ManagerScheduleRequests.
// All objects returned here must be treated as read-only.
type ManagerScheduleRequestNamespaceLister interface {
	// List lists all ManagerScheduleRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerScheduleRequest, err error)
	// Get retrieves the ManagerScheduleRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerScheduleRequest, error)
	ManagerScheduleRequestNamespaceListerExpansion
}

// managerScheduleRequestNamespaceLister implements the ManagerScheduleRequestNamespaceLister
// interface.
type managerScheduleRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerScheduleRequests in the indexer for a given namespace.
func (s managerScheduleRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerScheduleRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerScheduleRequest))
	})
	return ret, err
}

// Get retrieves the ManagerScheduleRequest from the indexer for a given namespace and name.
func (s managerScheduleRequestNamespaceLister) Get(name string) (*v1alpha1.ManagerScheduleRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managerschedulerequest"), name)
	}
	return obj.(*v1alpha1.ManagerScheduleRequest), nil
}
